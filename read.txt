Импорт:
var Style = require('nya-style');
import Style from 'nya-style';

Simple Usage:
Style({
	body:{
		margin: 0,
		padding: 0
	},
	".main":{
		background: 'red',
		padding: 5,
		a:{
			textDecoration: 'none',
		}
	}
}).parse();

Style() возвращает объект, в котором 3 метода: setRules(rules: object), setUnits(newUnits: object, merge: bool), parse(mode: bool);
setUnits() - Устанавливает дефолтные единицы измерения для величин. Например, если указать margin: 5, то автоматически к 5 будут добавленны единицы измерени, установленные либо по умолчанию, либо разработчиком через функцию setUnits. 
	Первый параметр несёт в себе объект типи ключ - значение, где ключ - css параметр, а значени - единицы измерения.

	Второй аргумент говорит о необходимости совмещения первого параметра и дефолтных единиц. Чтобы не совмещать, необходимо выставить true;

parse() - возвращает строку css формата. 
	Единственный параметр запрашивает необходимость открытия новой вкладки с итоговой таблицей стилей.

setRules(rules) - функция, принимающая объект css правил. Её использование не обязательно, т.к. функция Style() может принимать те же параметры, что и setRules.
	Далее о формате объекта rules и пойдет речь.

	То, как обработается значение, зависит от формата. Например, строка или число обработаются, как простые значения, в то время как объект обработается как вложенный стиль, массив обработается как transition property, а функция обработается как более сложная структура, например @keyframes

Начнём с простого:
	rules - это объект, поэтому он всегда начинается с поставления {};
	Далее как ключи в нём идут имена селекторов, а значение - это объект со свойствами.
	{
		body:{
			padding: "5px"
		}
	}
	Заметим, что в данном примере мы не будем касаться автоматических единиц измерения. После применения функции parse() данный объект будет конвертирован в
		body{
			padding: 5px
		}
		обычная css строка.
	на месте body может быть любой селектор, но это должен быть именно селектор, т.е. ".main" - класс main, "#hero" - DOM элемент с id='hero'
	{
		".main":{
			background: 'black'
		},
		"#hero":{
			position: 'fixed'
		}
	}
	Свойства(properties) на подобии border-radius должны быть наприсаны либо через камелкейс(borderRadius), либо в ковычках("border-radius")
	{
		".main":{
			borderRadius: "5px"
		},
		"#hero":{
			"justify-content": 'center'
		}
	}
	Перейдём к авто расстановке единиц измерения. По умолчанию для margin и padding используются px, поэтому объект
	{
		".main":{
			margin: 5
		}
	}
	Будет превращён в 
	.main{
		margin: 5px
	}
	Это удобная функция несёт в себе много упращений. Например, 
	border: "1 solid black" будет превращена в 
	border: 1px solid black. 
	Это работает и с более сложными структурами:
		margin: "3 auto 3 9" -> margin: 3px auto 3px 9px
		boxShadow: "0 0 10 0 black" -> box-shadow: 0px 0px 10px 0px black

	О принципах работы можно будет посмотреть в дополнительных материалах.
	Узнать дефолтные е.и. можно будет на оф. сайте.
	Изменить их можно с помощью функции setUnits();
		Первым аргументом идёт объект содержащий свойство и единицы измерения:
	{
		margin: 'px',
		"border-radius": 'px',
		width: 'vw'
	}
	Отметим, что свойства должны быть написаны так, как они написаны в css, иначе магиии не будет.
	Второй аргумент отвечает за merge новых и старых свойств. если аргумента нет, или он равен false, то свой-
	ства мёрджатся, если true, то новый объект полностью заменяет старый.

	Я не ограничиваю вас в разработке, поэтому если вы поставите opacity: 'px', то в итоге вы и получите то, что написали( opacity: 1px ). Стреляйте себе в ноги, сколько захотите).

C простыми структурами поконченно, теперь приступим к сложным.
	Как я и сказал, каждый тип данных будет нести в себе некий смысл, поэтому начнём с массивов.
	Массивы необходимы для более простого объявления transition. Если вам надоедо писать каждый раз 
	transition: background .3s linear, border-radius .3s, то добро пожаловать.
	Теперь вы можете просто написать
		{
			".main":{
				background:["black", .3, "linear"],
				borderRadius: [ 5, .3 ]
			}
		}
		что превратиться в 
		.main{
			background: 'black',
			border-radius: 5px,
			transition: background .3s linear, border-radius .3s
		}
	Время измеряется в секундах.
	А что будет если написать явный transition? А ничего, он просто соединится с другими:
		{
			".main":{
				background:["black", .3, "linear"],
				borderRadius: [ 5, .3 ],
				transition: "outline .3s"
			}
		}
		превратиться в 
		.main{
			background: 'black',
			border-radius: 5px,
			transition: outline .3s, background .3s linear, border-radius .3s
		}
	Всё просто. И да, как можно понять, расстановка единиц измерения работает и здесь.

	Теперь переходим к объектам.
	В простом понимании объект - это вложенный класс.
	Например:{
		'.main':{
			padding: 5,
			a:{
				border: "1 solid black"
			}
		}
	}
	Будет превращён в 
	.main{
		padding: 5px
	}
	.main a{
		border: 1px solid black;
	}
	Говоря языком css мы добавили контекст к селектору "a" и эти свойства будут работать только с ссылками, находящимися внутри объектов с классом ".main"
	Такая инкапсуляция есть во многих препроцессорах.
	
	это работет и с псевдоклассами:
		'.main':{
			padding: 5,
			":hover":{
				padding: 2
			}
		}
		->
		.main{
			padding: 5px;
		}
		.main:hover{
			padding: 2px
		}

	Также, если вложенный селектор начинается с нижнего подчёркивания('_'), то образуется новый, абсолютно независимый класс, например:

	'.main':{
		padding: 0,
		_left:{
			paddingLeft: 5
		}
	}

	result==>

	.main{
		padding: 0px;
	}
	.main_left{
		padding-left: 5px
	}

	Особое внимание хочу уделить медиа запросам(media queries), так как у них свой синтаксис.
	Вы можете сразу же писать медиа запросы внутри классов, при этом указывая правила запроса.
	'.main':{
		padding: 10,
		media:{
			"(max-width: 100px)":{
				padding: 0
			},
			"(max-width: 200px)":{
				margin: 5
			}
		}
	}
	->
	.main{
		padding: 10px
	}

	@media screen and (max-width: 100px){
		.main{
			padding: 0px
		}
	}
	@media screen and (max-width: 200px){
		.main{
			margin: 5px
		}
	}

	Не волнуйтесь, селекторы соединяются по одинаковым запрсам
	'.main':{
		padding: 10,
		media:{
			"(max-width: 500px)":{
				background: 'red'
			}
		}
	},
	"#hero":{
		border: '2 solid black',
		media:{
			"(max-width: 500px)":{
				border: '1 solid black'
			}
		}
	}
	---->
	.main{
		padding: 10px
	}

	#hero{
		border: 2px solid black
	}

	@media screen and (max-width: 500px){
		.main{
			background: red
		}

		#hero{
			border: 1px solid black
		}
	}
	На данный момент (max-width: 300px) и (max-width:300px) - это разные селекторы.

	Также, есть отдельный интерфейс для управления глобальными медиа.
	Если в корневом объекте написать свойство media, то его свойствами будут правилами media, а далее указываются селекторы. Всё прямо как в обычном css.
	{
		body:{
			padding: 0
		},
		media:{
			"(max-width: 300px)":{
				header:{
					height: 20
				}
			}
		}
	} 
	------>
	body{
		padding: 0px
	}
	@media screen and (max-width: 300px){
		header{
			height: 20px
		}
	}

СПЕШИАЛ ФОР КАТЮХА!!!
Использование функций.
Нужны для костомизации и сложных структур.
Использование:
Style({
	body:{
		margin: 0,
		load: descr=>(
			descr.anim({
				from:{
					opacity: 0
				},
				to:{
					opacity: 1
				}
			})
		)
	}
}).parse()
--->
body{
	margin: 0
}
@keyframes load{
	from{
		opacity: 0
	}
	to{
		opacity: 1
	}
}
Если значением ключа будет функция, то в неё будет передан объект дескрипор(В примере descr)
У дескриптора разные методы(на примере используется метод anim для простенькой анимации), каждый из которых 
несёт в себе разный смысл.
Функция должна обязательно возвращать результат работы метода дескриптора.

Интерфейс descr.anim(rules: object)
В метод передаётся объект правил, которые будут преобразованы во фреймы анимации, т.е. ключами
должны идти "from", "to", "0%", "10%", значения - объекты с css свойствами. В общем то всё похоже на обычную
css keyframes анимацию.

КАСТОМИЗАЦИЯ И use()

Style(rules: object).use(name: string, cb: function).parse()
В функцию use первым параметром идёт название метода, по которому его можно будет вызвать в юудущем,
в вторым идёт callback, который будет вызываться. Метод будет записан в дескириптор под ключом name.

Подробнее о callback'е.
В колбек передаются параметры, переданные в метод дескриптора.
Возвращать колбек должен функцию, передаваться в которую будут 1-м аргументом имя css selector'а,
2-м ключ, имя метод селектора.

Пример
Style({
	body:{
		margin: 5,
		margin: descr=>(
			descr.media("(max-width: 300px)", 0)
		)
	}
}).use("media", function(rule, value){
	return function(name, key){
		return(
		`@media screen and ${rule}{
			${name}{
				${key}: ${value};
			}
		}`)
	}
}).parse()
--->
body{
	margin: 5px
}

@media screen and (max-width: 300px){
	body{
		margin: 0
	}
}

ШОРТКАААААТЫЫЫЫЫ!!!!
Всех заебало писать длинные слова, поэтому будем писать коротко, например вместо
margin: 5
Напишем 
$m: 5

Вместо
display: 'flex',
flex-direction: 'column'
padding: 5
Напишем:
"$d-ff/d-cp": "5"
Такой словарик, где каждая буква - это css property будет юзаться оч много.
Синтаксис такой:
Если буква одна, то она просто расшифруется, а для неё будет подобранно значение из строки справа, идущее следующим. Например $m: 5 <=> { margin: 5 }, если значений несколько, то стоит разделить их запятыми.
Например:
$mp: "5, 5" <=> { margin: 5, padding: 5 }
Если за буквой идёт тире( - ), то следующая буква будет расценена, как сокращённое значение.
Для каждого свойства свой набор значений. например для margin($m) есть только одно - a(auto)
"$m-a": "any" <=> { margin: 'auto' }==> margin: auto 
"$m-ap": "5" <=> { margin: 'auto', padding: 5 }==> margin: auto; padding: 5px
Всё верно. Значение 5 не было занято ключ-парой m-a, у неё свой путь. В первом примере "any" нужна, чтобы не нарушать принцип объектов js { key: value }
Слеш ( / ) нужен для сокращения свойств с тире, например flex-direction("$f/d") и тд.
И да, такому значению тоже можно приставить быстрое значение через тире("$f/d-c"==>flexDirection: 'column')
Все подобные веще регулируются словарём.

О котором немного позже. Сначала разберём, как настраивать его.
В цепочке Style().setAlph(alph: object).parse() появляется метод setAlph()
В него аргуменом удёт специально отформатированный объект.
Вид объекта:
{
	a(Буква-ключ):{
		name(то, от чего сокращение): "align-items",
		value(Быстрые значения):{
			c(Буква быстрого значения): 'center'
		}
	}
}
По итогам строка { "$a-c":"any" } будет преобразованна в align-items: center
Так идёт работа с тире.
Для слеша нужна более сложная структура, например flex группа.
{
	f(Буква-ключ. начало цепочки):{
		name(Сокращение): 'flex',
		d(буква, сокращающая подгруппу):{
			name(Всё также. То, что сокращает буква): 'direction',
			value(Быстрые значения):{
				c: "center",
				a: "space-around",
				b: "space-between"
			}
		}
	}
}
{"$f/d-c":"any"}<=>{flexDirection: 'center'}==>flex-direction: center
Таких уровней вложений может быть сколько угодно, единственное требование, чтобы было поле name, для расшифровки.

Расширения
	В либе были реализованы идеи наследования.
	Теперь можно использовать метод setPattern(name: String, rules: Object) || setPattern(rulse: Object);
	В первом слечае в функции 2 аргумена name и rules;
	собственно name - имя шаблона, а rules - правила этого шаблона, например

	Style()
	.setPattern('pat1', {
		$g: 'red'
	})

	Также есть второй способ объявления шаблонов через объект. в этом случает ключи - имена, а значения-
	свойства.

	Style()
	.setPattern({
		pat1: {
			$g: 'red'
		}
	})

	Используются шаблоны крайне просто.

	let rules = {
		selector::patternName: {
			...rules
		}
	}

	в selector будут переданы правила из шаблона patternName

Теперь дефолтный словарь:
Он не совершенен и будет расширяться. Вы, Катерина, вольны с ним работать так, как хотите)
{
	a: {
		name: "align-items",
		value: {
			c: "center",
			s: "flex-start",
			e: "flex-end",
			b: "baseline"
		}
	},
	b: {
		name: "border",
		value:{
			n: "none"
		},
		t:{
			name: "top",
			value: {
				a: 'auto'
			}
		},
		r:{
			name: "right",
			value: {
				a: 'auto'
			}
		},
		b:{
			name: "bottom",
			value: {
				a: 'auto'
			}
		},
		l:{
			name: "left",
			value: {
				a: 'auto'
			}
		}
	},
	c: {
		name: "color"
	},
	d: {
		name: "display",
		value: {
			f: 'flex',
			b: 'block',
			n: 'none'
		}
	},
	f: {
		name: "flex",
		d: {
			name: "direction",
			value: {
				c: "column",
				r: "row"
			}
		},
		g: {
			name: 'grow',
			value: {
				1: '1',
				2: '2'
			}
		}
	},
	g: {
		name: "background",
		c: { name: "color" },
		i: { name: 'image' },
		s: { 
			name: 'size',
			value:{
				a: 'auto',
				c: 'cover'
			}
		},
		r: {
			name: "repeat",
			value: {
				n: 'no-repeat',
				r: 'repeat',
				i: 'inherit'
			}
		}
	},
	h: {
		name: "height"
	},
	j: {
		name: "justify-content",
		value:{
			c: 'center',
			a: 'space-around',
			b: 'space-between',
			s: 'flex-start',
			e: 'flex-end'
		}
	},
	l: {
		name: 'overflow',
		value: {
			h: 'hidden',
			s: 'scroll',
			v: 'visible',
			i: 'inherit'
		},
		x: {
			name: "x",
			value: {
				h: 'hidden',
				s: 'scroll',
				v: 'visible',
				i: 'inherit'
			}
		},
		y: {
			name: "y",
			value: {
				h: 'hidden',
				s: 'scroll',
				v: 'visible',
				i: 'inherit'
			}
		}, 
	},
	m: {
		name: "margin",
		value: {
			a: 'auto',
			0: "0px",
			1: "1px",
			2: "2px",
			3: "3px",
			4: "4px",
			5: "5px",
			6: "6px",
			7: "7px",
			8: "8px",
			9: "9px",
		},
		t:{
			name: "top",
			value: {
				a: 'auto'
			}
		},
		r:{
			name: "right",
			value: {
				a: 'auto'
			}
		},
		b:{
			name: "bottom",
			value: {
				a: 'auto'
			}
		},
		l:{
			name: "left",
			value: {
				a: 'auto'
			}
		}
	},
	o: {
		name: "opacity",
		value: {
			0: 0,
			2: .2,
			3: .3,
			4: .4,
			5: .5,
			6: .6,
			7: .7,
			8: .8,
			9: .9,
			1: 1

		}
	},
	p: {
		name: "padding",
		value:{
			a: 'auto',
			0: "0px",
			1: "1px",
			2: "2px",
			3: "3px",
			4: "4px",
			5: "5px",
			6: "6px",
			7: "7px",
			8: "8px",
			9: "9px",
		},
		t:{
			name: "top",
			value: {
				a: 'auto'
			}
		},
		r:{
			name: "right",
			value: {
				a: 'auto'
			}
		},
		b:{
			name: "bottom",
			value: {
				a: 'auto'
			}
		},
		l:{
			name: "left",
			value: {
				a: 'auto'
			}
		}
	},
	r: {
		name: "border-radius",
		value:{
			0: "0px",
			1: "1px",
			2: "2px",
			3: "3px",
			4: "4px",
			5: "5px",
			6: "6px",
			7: "7px",
			8: "8px",
			9: "9px",
			r: "50%"
		}
	},
	s: {
		name: "font-size",
		value: {
			h: "30px",
			b: "16px",
			s: "14px"
		}
	},
	t: {
		name: "text-align",
		value:{
			c: 'center',
			l: 'left',
			r: 'right'
		}
	},
	u: {
		name: "cursor",
		value:{
			p: "pointer",
			d: "default",
			n: 'none'
		}
	},
	v: {
		name: "visibility",
		value: {
			v: 'visible',
			h: 'hidden'
		}
	},
	w: {
		name: "width"
	},
	x: {
		name: "left"
	},
	y: {
		name: "top"
	},
	z: {
		name: "z-index",
		value:{
			0: 0,
			1: 1,
			2: 2,
			3: 3,
			4: 4,
			5: 5,
			6: 6,
			7: 7,
			8: 8,
			9: 9,
			t: 10,
			h: 100,
			m: -1,
		}
	},
}

ВСЁ!!!!!

Полная цепь:
Style().setAlph().setUnits().use().parse() ==> css